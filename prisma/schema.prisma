// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Radio {
  id          Int             @id @default(autoincrement())
  name        String          @db.VarChar(255)
  thumbnail   String          @db.VarChar(255)
  description String?
  stream_url  String          @db.VarChar(255)
  is_featured Boolean?
  is_hls      Boolean?
  genres      GenresOnRadio[]
  org_id      Int?
  org         Organization?   @relation(fields: [org_id], references: [id])
  channel_id  Int?
  channel     Channel?        @relation(fields: [channel_id], references: [id])
  likes       LikeOnRadio[]
  website     String?
}

model Genre {
  id     Int             @id @default(autoincrement())
  name   String          @db.VarChar(255)
  radios GenresOnRadio[]
}

model GenresOnRadio {
  radio_id Int
  radio    Radio @relation(fields: [radio_id], references: [id])
  genre_id Int
  genre    Genre @relation(fields: [genre_id], references: [id])

  @@id([radio_id, genre_id])
}

model Organization {
  id     Int     @id @default(autoincrement())
  name   String  @db.VarChar(255)
  radios Radio[]
}

model Channel {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  thumbnail   String  @db.VarChar(255)
  description String?
  radios      Radio[]
}

model User {
  id       Int      @id @default(autoincrement())
  name     String   @unique @db.VarChar(255)
  nickname String?  @db.VarChar(255)
  email    String?  @unique @db.VarChar(255)
  password String?  @db.VarChar(255)
  avatar   String?  @db.VarChar(255)
  active   Boolean  @default(false)
  profile  Profile?
  likes    Like[]
}

model Profile {
  id       Int     @id @default(autoincrement())
  nickname String  @db.VarChar(255)
  website  String? @db.VarChar(255)
  user_id  Int     @unique
  user     User    @relation(fields: [user_id], references: [id])
}

model Like {
  id      Int           @id @default(autoincrement())
  user_id Int
  user    User          @relation(fields: [user_id], references: [id])
  radios  LikeOnRadio[]
}

model LikeOnRadio {
  like_id  Int
  like     Like  @relation(fields: [like_id], references: [id])
  radio_id Int
  radio    Radio @relation(fields: [radio_id], references: [id])

  @@id([like_id, radio_id])
}

generator zod {
  provider = "zod-prisma"
  // (default) the directory where generated zod schemas will be saved
  output   = "./zod"

  // (default) Create and export both plain and related models.
  relationModel = true
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  // (default) Output models using pascal case (ex. UserModel, PostModel)
  modelCase = "PascalCase"
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  // (default) Suffix to apply to your prisma models when naming Zod schemas
  modelSuffix = "Model"

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  // represent the prisma Decimal type using Decimal.js (as Prisma does)
  useDecimalJs = true

  // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable
  imports = null

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  // (default) uses prisma's scheme for JSON field nullability
  prismaJsonNullability = true
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}
